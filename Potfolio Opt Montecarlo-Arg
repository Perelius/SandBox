## Get best assests comb with montecarlo and generate the efficient frontier


import numpy as np
import pandas as pd
import pandas_datareader.data as web
import seaborn as sns
import matplotlib.pyplot as plt
#list of stocks in portfolio
stocks = ['GGAL', 'PAM', 'MELI', 'CRESY']
#download daily price data for each of the stocks in the portfolio
data = web.DataReader(stocks,data_source='yahoo',start='01/01/2010')['Adj Close']
data.sort_index(inplace=True)
#convert daily stock prices into daily returns
returns = data.pct_change()
#calculate mean daily return and covariance of daily returns
mean_daily_returns = returns.mean()
cov_matrix = returns.cov()
#set number of runs of random portfolio weights
num_portfolios = 500
#set up array to hold results
#We have increased the size of the array to hold the weight values for each stock
results = np.zeros((4+len(stocks)-1,num_portfolios))
for i in range(num_portfolios):
    #select random weights for portfolio holdings
    weights = np.array(np.random.random(4))
    #rebalance weights to sum to 1
    weights /= np.sum(weights)
    
    #calculate portfolio return and volatility
    portfolio_return = np.sum(mean_daily_returns * weights) * 252
    portfolio_std_dev = np.sqrt(np.dot(weights.T,np.dot(cov_matrix, weights))) * np.sqrt(252)
    
    #store results in results array
    results[0,i] = portfolio_return
    results[1,i] = portfolio_std_dev
    #store Sharpe Ratio (return / volatility) - risk free rate element excluded for simplicity
    results[2,i] = results[0,i] / results[1,i]
    #iterate through the weight vector and add data to results array
    for j in range(len(weights)):
        results[j+3,i] = weights[j]
#convert results array to Pandas DataFrame
results_frame = pd.DataFrame(results.T,columns=['ret','stdev','sharpe',stocks[0],stocks[1],stocks[2],stocks[3]])
#locate position of portfolio with highest Sharpe Ratio
max_sharpe_port = results_frame.iloc[results_frame['sharpe'].idxmax()]
#locate positon of portfolio with minimum standard deviation
min_vol_port = results_frame.iloc[results_frame['stdev'].idxmin()]
#create scatter plot coloured by Sharpe Ratio
sns.set()
plt.scatter(results_frame.stdev,results_frame.ret,c=results_frame.sharpe,cmap='RdYlBu')
plt.xlabel('Volatility')
plt.ylabel('Returns')
plt.colorbar()
#plot red star to highlight position of portfolio with highest Sharpe Ratio
plt.scatter(max_sharpe_port[1],max_sharpe_port[0],marker=(5,1,0),color='r',s=1000)
#plot green star to highlight position of minimum variance portfolio
plt.scatter(min_vol_port[1],min_vol_port[0],marker=(5,1,0),color='g',s=1000)


# Get Assets 

Max_Perfomance = max_sharpe_port.to_frame().T.iloc[:, [3,4,5,6]]
Min_perfomance = min_vol_port.to_frame().T.iloc[:, [3,4,5,6]]



Dates= returns.index.tolist()
column_values=pd.Series(stocks)
Max_Performance=pd.DataFrame(Forro, index =[Dates], columns =column_values) 
Min_perfomance = pd.DataFrame(Forro2, index =[Dates], columns =column_values) 
Max_Performance["Type"] = "Max"
Min_perfomance["Type"] = "Min"
#frames = [Max_Performance,Min_perfomance]
#Portafolios_Series=pd.concat(frames)
Max_Performance["Total Return"] = Max_Performance[Max_Performance.columns].sum(axis=1)
Min_perfomance["Total Return"] = Min_perfomance[Min_perfomance.columns].sum(axis=1)
#Portafolios_Series["Total Return"] = Portafolios_Series[Portafolios_Series.columns].sum(axis=1)
#Portafolios_Series = Portafolios_Series[["Type","Total Return"]]
Max_Performance = Max_Performance[["Type","Total Return"]]
Min_perfomance = Min_perfomance[["Type","Total Return"]]


#Backtest Portfolio Vs Market

#Define Frames and Multiply the weight of each stock and calculate the cummulative return of bothe portfolios

dfmax= max_sharpe_port.to_frame().T
dfmin= min_vol_port.to_frame().T

final_df = pd.DataFrame(returns.values * dfmax[['GGAL','PAM','MELI','CRESY']].values,columns=returns.columns,index=returns.index)
feardf = pd.DataFrame(returns.values * dfmin[['GGAL','PAM','MELI','CRESY']].values,columns=returns.columns,index=returns.index)
final_df["Portfolio Returns"]=final_df.sum(axis=1) 
feardf["Portfolio Returns"]=feardf.sum(axis=1) 
portfolio_df = final_df[["Portfolio Returns"]]
portfolio2_df = feardf[["Portfolio Returns"]]

CumulativeReturns = (((1+portfolio_df["Portfolio Returns"]).cumprod()-1))*100
CumulativeReturns2 = (((1+portfolio2_df["Portfolio Returns"]).cumprod()-1))*100
CumulativeReturns.plot()
CumulativeReturns2.plot()
plt.show()

CumulativeReturns
CumulativeReturns2

#Get IMV Data. Calculate Cummulative returns and compare.

# Merval
tickers = ['^MERV']

# Cota de tiempo
start_date = '01/01/2015'
end_date = datetime.today().strftime('%Y-%m-%d')

# Traer datos desde Yahoo Financ
panel_data = web.DataReader(tickers,data_source='yahoo',start='01/01/2015')
#Definir close pirce
close = panel_data['Adj Close']
close= close.rename(columns={'^MERV': "IMV"})
Returns_IVM = close.pct_change()

CumulativeReturnsIMV.plot(color = 'red',label='IMV')
CumulativeReturns.plot(color = 'blue',label='High Sharpe')
CumulativeReturns2.plot(color ='green',label='Low Risk')
plt.legend()
plt.show()
print(CumulativeReturnsIMV.iloc[-1],"To date IMV Return")
print(CumulativeReturns.iloc[-1],"To date Riskier Portfolio Return")
print(CumulativeReturns2.iloc[-1],"To date Lower Risk Return")

